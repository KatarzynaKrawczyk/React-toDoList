{"version":3,"sources":["component/Button.jsx","component/ListItem.jsx","container/ListContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","handleChange","type","text","ListItem","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEdited","setState","console","log","className","name","role","component_Button","bind","React","Component","ListContainer","edited","nextProps","nextState","loginButton","logoutButton","component_ListItem","App","Fragment","container_ListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c00ae0e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Button(props) {\r\n  return <button onClick={props.handleChange} type={props.type || 'button'}>{props.text}</button>\r\n}\r\nexport default Button;\r\n"," import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nclass ListItem extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      isEdited: false\r\n    }\r\n  }\r\n\r\n  handleChange = () => {\r\n    if(!this.state.isEdited) {\r\n      this.props.handleChange();\r\n      this.setState({\r\n        isEdited: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n  console.log('render');\r\n    return (\r\n      <li className=\"d-flex flex-row list-group-item\">\r\n        <div className=\"mr-auto p-2\">\r\n          {this.props.name}\r\n        </div>\r\n        <div className=\"p-2 btn-group\" role=\"group\">\r\n          <Button type=\"button\" className=\"btn btn-secondary\" handleChange={this.handleChange.bind(this)} text=\"edit\"></Button>\r\n          <Button type=\"button\" className=\"btn btn-secondary\" text=\"x\"></Button>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"../component/ListItem\";\r\n\r\nclass ListContainer extends React.Component {\r\n  constructor() {\r\n    console.log(\"czesto constructor\");\r\n    super();\r\n\r\n    this.state = {\r\n      edited: 0\r\n    }\r\n  }\r\ncomponentWillMount(){\r\n  console.log('componentWillMount nieczęsto');\r\n}\r\ncomponentDidMount(){\r\n  console.log('czesto componentDidMount: AJAX, timery liczniki, setInterval');\r\n}\r\n\r\ncomponentWillReceiveProps(nextProps) {\r\n  console.log('zniknie componentWillReceiveProps raczej nie używa się zmiana stanu w oparciu o nowe propsy');\r\n}\r\nshouldComponentUpdate(nextProps, nextState){\r\n   console.log('shouldComponentUpdate optymalizacja komponentów na dużych obiektach');\r\n // if(zminiamy tylko 'this.state.edited'){\r\n // return false\r\n // }\r\n   return true;\r\n }\r\ncomponentWillUpdate(nextProps){\r\n  console.log('zniknnie componentWillUpdate nie używa się');\r\n}\r\ncomponentDidUpdate(){\r\n  console.log('componentDidUpdate jako componentDidMount lepiej uzywac handleChange');\r\n}\r\n componentWillUnmount(){\r\n   console.log('componentWillUnmount destructor ,kasujemy timery-czyszczenie przeglądaki po naszym komponencie');\r\n }\r\n\r\n  handleChange = () => {\r\n    this.setState({\r\n      edited: this.state.edited + 1\r\n    })\r\n  }\r\n\r\n  render() {\r\n    function LoginButton() {\r\n      return <h3>Login4</h3>;\r\n    }\r\n    let loginButton = null;\r\n    let logoutButton = null;\r\n    if(this.state.edited === 0) {\r\n      loginButton = <h3>Login3</h3>;\r\n    } else {\r\n      logoutButton = <h3>Logout3</h3>;\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.edited === 0 && <h3>Login</h3>}\r\n        {this.state.edited === 0 ? <h3>Login2</h3>:null}\r\n        {loginButton}\r\n        {this.state.edited === 0 && <LoginButton/>}\r\n        nie polecany lepiej w oddzielnym komponencie\r\n        <h2>\r\n          Zedytowano: {this.state.edited} razy\r\n        </h2>\r\n        {logoutButton}\r\n        {this.state.edited > 0 ?\r\n        <h3>Logout</h3> :\r\n        null}\r\n        <ul className=\"list-group\">\r\n          {this.state.edited === 0 ?\r\n            <ListItem\r\n              handleChange={this.handleChange.bind(this)}\r\n              name={'Kasia'}\r\n//nie mogę wstawic cyfry\r\n            /> :\r\n          null }\r\n        </ul>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListContainer;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListContainer from './container/ListContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <ListContainer name=\"Kasia1\"/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}